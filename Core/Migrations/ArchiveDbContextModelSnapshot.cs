// <auto-generated />
using System;
using Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(ArchiveDbContext))]
    partial class ArchiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Agence", b =>
                {
                    b.Property<string>("CodeAgence")
                        .HasColumnType("character varying")
                        .HasColumnName("code_agence");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("adresse");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nom");

                    b.Property<string>("NumTelephone")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("num_telephone");

                    b.HasKey("CodeAgence")
                        .HasName("agence_pkey");

                    b.ToTable("agence", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CalendrierConservation", b =>
                {
                    b.Property<string>("NRegle")
                        .HasColumnType("character varying")
                        .HasColumnName("n_regle");

                    b.Property<string>("CodeSousDossier")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("code_sous_dossier");

                    b.Property<string>("IdUnite")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("id_unite");

                    b.HasKey("NRegle")
                        .HasName("calendrier_conservation_pkey");

                    b.HasIndex("CodeSousDossier");

                    b.HasIndex("IdUnite");

                    b.ToTable("calendrier_conservation", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Dossier", b =>
                {
                    b.Property<string>("IdDossier")
                        .HasColumnType("character varying")
                        .HasColumnName("id_dossier");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("DelaisConserv")
                        .HasColumnType("integer")
                        .HasColumnName("delais_conserv");

                    b.Property<string>("IdLocal")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("id_local");

                    b.Property<string>("IdUniteResponsable")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("id_unite_responsable");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("intitule");

                    b.Property<byte[]>("ScanDossier")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("scan_dossier");

                    b.HasKey("IdDossier")
                        .HasName("dossier_pkey");

                    b.HasIndex("IdLocal");

                    b.HasIndex("IdUniteResponsable");

                    b.ToTable("dossier", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Local", b =>
                {
                    b.Property<string>("IdLocal")
                        .HasColumnType("character varying")
                        .HasColumnName("id_local");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("adresse");

                    b.Property<NpgsqlPoint?>("Coordonnees")
                        .HasColumnType("point")
                        .HasColumnName("coordonnees");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("localisation");

                    b.HasKey("IdLocal")
                        .HasName("local_pkey");

                    b.ToTable("local", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Mouvement", b =>
                {
                    b.Property<string>("IdMouvement")
                        .HasColumnType("character varying")
                        .HasColumnName("id_mouvement");

                    b.Property<DateOnly?>("DateDecharge")
                        .HasColumnType("date")
                        .HasColumnName("date_decharge");

                    b.Property<DateOnly?>("DateEnvoie")
                        .HasColumnType("date")
                        .HasColumnName("date_envoie");

                    b.Property<DateOnly?>("DateRetour")
                        .HasColumnType("date")
                        .HasColumnName("date_retour");

                    b.Property<string>("Etat")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("etat");

                    b.Property<string>("IdDossier")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("id_dossier");

                    b.Property<string>("NatureDoc")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nature_doc");

                    b.Property<string>("NomUtilisateur")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nom_utilisateur");

                    b.Property<string>("ServeurDemandeur")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("serveur_demandeur");

                    b.HasKey("IdMouvement")
                        .HasName("mouvement_pkey");

                    b.HasIndex("IdDossier");

                    b.ToTable("mouvement", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Operation", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("character varying")
                        .HasColumnName("code");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("libelle");

                    b.HasKey("Code")
                        .HasName("operation_pkey");

                    b.ToTable("operation", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SousDossier", b =>
                {
                    b.Property<string>("IdSousDossier")
                        .HasColumnType("character varying")
                        .HasColumnName("id_sous_dossier");

                    b.Property<string>("CodeOperation")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("code_operation");

                    b.Property<string>("IdDossier")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("id_dossier");

                    b.HasKey("IdSousDossier")
                        .HasName("sous_dossier_pkey");

                    b.HasIndex("CodeOperation");

                    b.HasIndex("IdDossier");

                    b.ToTable("sous_dossier", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UniteResponsable", b =>
                {
                    b.Property<string>("IdUnite")
                        .HasColumnType("character varying")
                        .HasColumnName("id_unite");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("adresse");

                    b.Property<string>("CodeAgence")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("code_agence");

                    b.Property<string>("NomUnite")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nom_unite");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("numero");

                    b.HasKey("IdUnite")
                        .HasName("unite_responsable_pkey");

                    b.HasIndex("CodeAgence");

                    b.ToTable("unite_responsable", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CalendrierConservation", b =>
                {
                    b.HasOne("Core.Entities.SousDossier", "CodeSousDossierNavigation")
                        .WithMany("CalendrierConservations")
                        .HasForeignKey("CodeSousDossier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calendrier_conservation_code_sous_dossier_fkey");

                    b.HasOne("Core.Entities.UniteResponsable", "IdUniteNavigation")
                        .WithMany("CalendrierConservations")
                        .HasForeignKey("IdUnite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calendrier_conservation_id_unite_fkey");

                    b.Navigation("CodeSousDossierNavigation");

                    b.Navigation("IdUniteNavigation");
                });

            modelBuilder.Entity("Core.Entities.Dossier", b =>
                {
                    b.HasOne("Core.Entities.Local", "IdLocalNavigation")
                        .WithMany("Dossiers")
                        .HasForeignKey("IdLocal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dossier_id_local_fkey");

                    b.HasOne("Core.Entities.UniteResponsable", "IdUniteResponsableNavigation")
                        .WithMany("Dossiers")
                        .HasForeignKey("IdUniteResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dossier_id_unite_responsable_fkey");

                    b.Navigation("IdLocalNavigation");

                    b.Navigation("IdUniteResponsableNavigation");
                });

            modelBuilder.Entity("Core.Entities.Mouvement", b =>
                {
                    b.HasOne("Core.Entities.Dossier", "IdDossierNavigation")
                        .WithMany("Mouvements")
                        .HasForeignKey("IdDossier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mouvement_id_dossier_fkey");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("Core.Entities.SousDossier", b =>
                {
                    b.HasOne("Core.Entities.Operation", "CodeOperationNavigation")
                        .WithMany("SousDossiers")
                        .HasForeignKey("CodeOperation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sous_dossier_code_operation_fkey");

                    b.HasOne("Core.Entities.Dossier", "IdDossierNavigation")
                        .WithMany("SousDossiers")
                        .HasForeignKey("IdDossier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sous_dossier_id_dossier_fkey");

                    b.Navigation("CodeOperationNavigation");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("Core.Entities.UniteResponsable", b =>
                {
                    b.HasOne("Core.Entities.Agence", "CodeAgenceNavigation")
                        .WithMany("UniteResponsables")
                        .HasForeignKey("CodeAgence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unite_responsable_code_agence_fkey");

                    b.Navigation("CodeAgenceNavigation");
                });

            modelBuilder.Entity("Core.Entities.Agence", b =>
                {
                    b.Navigation("UniteResponsables");
                });

            modelBuilder.Entity("Core.Entities.Dossier", b =>
                {
                    b.Navigation("Mouvements");

                    b.Navigation("SousDossiers");
                });

            modelBuilder.Entity("Core.Entities.Local", b =>
                {
                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("Core.Entities.Operation", b =>
                {
                    b.Navigation("SousDossiers");
                });

            modelBuilder.Entity("Core.Entities.SousDossier", b =>
                {
                    b.Navigation("CalendrierConservations");
                });

            modelBuilder.Entity("Core.Entities.UniteResponsable", b =>
                {
                    b.Navigation("CalendrierConservations");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
